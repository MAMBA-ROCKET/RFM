import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
import sympy as sp
import scipy.optimize as sciopt
import copy
import random
import time



def unity_function(x, center_x, radius):
    x_hat = (x - center_x) / radius
    d = (x - (center_x-radius))/(2*radius) 
    if center_x == 1:

        psi = torch.zeros_like(x)
        cond1 = (-1/4 < d) & (d <= 1/4)
        cond2 = (1/4 <= d) & (d <= 3/4)
        cond3 = (3/4 < d) & (d <= 5/4)
        psi[cond1] = 1
        psi[cond2] = 1
        psi[cond3] = (1 - torch.sin(2 * torch.pi * d[cond3]))/2
        return psi
    
    elif center_x == 7:
        psi = torch.zeros_like(x)
        cond1 = (-1/4 < d) & (d <= 1/4)
        cond2 = (1/4 <= d) & (d <= 3/4)
        cond3 = (3/4 < d) & (d <= 5/4)
        psi[cond1] = (1 + torch.sin(2 * torch.pi * d[cond1]))/2
        psi[cond2] = 1
        psi[cond3] = 1
        return psi
    
    else:
        psi = torch.zeros_like(x)
        cond1 = (-1/4 < d) & (d <= 1/4)
        cond2 = (1/4 <= d) & (d <= 3/4)
        cond3 = (3/4 < d) & (d <= 5/4)
        psi[cond1] = (1 + torch.sin(2 * torch.pi * d[cond1]))/2
        psi[cond2] = 1
        psi[cond3] = (1 - torch.sin(2 * torch.pi * d[cond3]))/2
        return psi
    

x = torch.linspace(0,1,100)
center_x = 0.5
radius = 0.2
y = unity_function(x, center_x, radius)
x = x.detach().numpy()
y = y.detach().numpy()
plt.plot(x,y)
plt.show()

# plot_points = 1000+1
# x_plot = np.linspace(0, 8, plot_points)

# AA = 1
# aa = 2.0*np.pi
# bb = 3.0*np.pi
# U_analytic = AA * np.sin(bb * (x_plot + 0.05)) * np.cos(aa * (x_plot + 0.05)) + 2.0

# plt.plot(x_plot,U_analytic)
# plt.xlabel('x')
# plt.ylabel('y')